@page "/count"
@rendermode InteractiveServer
@inject HttpClient Http

<PageTitle>Unterseite</PageTitle>

<h1>Abfrage</h1>

<EditForm Model="@presentationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Von Datum:</label>
        <InputDate @bind-Value="presentationModel.FromDate" TValue="DateTime" class="form-control" />
    </div>

    <div>
        <label>Bis Datum:</label>
        <InputDate @bind-Value="presentationModel.ToDate" TValue="DateTime" class="form-control" />
    </div>

    <p style="margin-top:20px;">
        <button type="submit" class="btn btn-primary">Absenden</button>
    </p>
</EditForm>

@if (presentationModel.Counter > 0)
{
    <p>Es wurden @presentationModel.Counter Präsentationen gefunden.</p>
}
else
{
    <p>Keine Präsentationen im angegebenen Zeitraum gefunden.</p>
}

@code {
    private Presentation presentationModel = new Presentation();

    private async Task HandleValidSubmit()
    {
        var queryParams = $"?fromdate={presentationModel.FromDate:yyyy-MM-dd}&todate={presentationModel.ToDate:yyyy-MM-dd}";
        var url = $"api/presentation/statistic{queryParams}";

        try 
        {
            presentationModel.Counter = await Http.GetFromJsonAsync<int>(url);

            Console.WriteLine($"Von Datum: {presentationModel.FromDate:yyyy-MM-dd}");
            Console.WriteLine($"Bis Datum: {presentationModel.ToDate:yyyy-MM-dd}");
            Console.WriteLine($"Counter: {presentationModel.Counter}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Abrufen der Präsentationen: {ex.Message}");
        }
    }

    public class Presentation
    {
        public DateTime FromDate { get; set; } = DateTime.Now;
        public DateTime ToDate { get; set; } = DateTime.Now;
        public int Counter { get; set; }
    }
}